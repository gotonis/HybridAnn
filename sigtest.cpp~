#include <cmath>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <vector>
#include "Neuron.hpp"
#include "SigNeuron.hpp"
#include "LinearNeuron.hpp"
#include "NeuralNet.hpp"

using namespace std;

float raw_in[4][150];
int labels[150];

int main(){
  srand(time(NULL));
  fstream fs;
  fs.open("Iris.csv", fstream::in);
  string temp;
  for(int i=0;i<150;i++){
    fs >> raw_in[0][i];
    fs >> raw_in[1][i];
    fs >> raw_in[2][i];
    fs >> raw_in[3][i];
    fs >> temp;
    if(temp == "Iris-setosa"){
      labels[i] = 1;
    } else if(temp == "Iris-versicolor"){
      labels[i] = 2;
    } else if(temp == "Iris-virginica"){
      labels[i] = 3;
    }
    else {
      cout << "Invalid label: " + temp;
      endl;
      labels[i] = -1;
      return 0;
    }
  }
  float max[4];
  float min[4];
  for(int j=0;j<4;j++){
  float max[j] = 0;
  float min[j] = 100;
    for(int i=0;i<150;i++){
      if(raw_in[j][i] > max[j]){
	max[j] = raw_in[j][i];
      }
      if(raw_in[j][i] < min){
	min[j] = raw_in[j][i];
      }
    }

    vector<vector<float> > trainInput = vector<vector<float> >(75, vector<float>(4,0));
    vector<vector<float> > trainLabel = vector<vector<float> >(75, vector<float>(3,0));
    vector<vector<float> > testInput = vector<vector<float> >(75, vector<float>(4,0));
    vector<vector<float> > testLabel = vector<vector<float> >(75, vector<float>(3,0));
    for(int i=0;i<150;i++){
      int t = (rand()%2);
      if(t){
	trainInput[i][0] = (raw_in[0][i]-min[0])/(max[0]-min[0]);
	trainInput[i][1] = (raw_in[1][i]-min[1])/(max[1]-min[1]);
	trainInput[i][2] = (raw_in[2][i]-min[2])/(max[2]-min[2]);
	trainInput[i][3] = (raw_in[3][i]-min[3])/(max[3]-min[3]);
	trainLabels[i][0] = (labels[i]==1);
	trainLabels[i][1] = (labels[i]==2);
	trainLabels[i][2] = (labels[i]==3);
      }else{
	testInput[i][0] = (raw_in[0][i]-min[0])/(max[0]-min[0]);
	testInput[i][1] = (raw_in[1][i]-min[1])/(max[1]-min[1]);
	testInput[i][2] = (raw_in[2][i]-min[2])/(max[2]-min[2]);
	testInput[i][3] = (raw_in[3][i]-min[3])/(max[3]-min[3]);
	testLabels[i][0] = (labels[i]==1);
	testLabels[i][1] = (labels[i]==2);
	testLabels[i][2] = (labels[i]==3);
      }
    }

    float * LR;
    *LR = 0.7;

    
    vector<Neuron*> layer1 = vector<Neuron*>();
    for(int i=0;i<3;i++){
      layer1.push_back(new SigNeuron(4,-1,1,LR));
    }
    vector<Neuron*> layer2 = vector<Neuron*>();
    for(int i=0;i<3;i++){
      layer2.push_back(new SigNeuron(3,-1,1,LR));
    }
    
